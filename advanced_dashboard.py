import streamlit as st
import pandas as pd
import numpy as np
import yfinance as yf
import ta
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import time
from strategy_builder import (
    StrategyBuilder, PresetStrategies, Condition, ConditionType, 
    Operator, get_strategy_description
)

# ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï
st.set_page_config(
    page_title="Í≥†Í∏â Ï£ºÏãù Ïä§ÌÅ¨Î¶¨ÎÑà",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Ï†úÎ™©
st.title("üöÄ Í≥†Í∏â Ï£ºÏãù Ï†ÑÎûµ Ïä§ÌÅ¨Î¶¨ÎÑà")
st.markdown("---")

class AdvancedStockScreener:
    def __init__(self):
        self.markets = {
            "KOSPI": self.get_kospi_stocks(),
            "KOSDAQ": self.get_kosdaq_stocks(),
            "NASDAQ": self.get_nasdaq_stocks(),
            "S&P 500": self.get_sp500_stocks()
        }
    
    @st.cache_data(ttl=3600)
    def get_kospi_stocks(_self):
        """KOSPI Ï£ºÏöî Ï¢ÖÎ™©Îì§"""
        return [
            "005930.KS",  # ÏÇºÏÑ±Ï†ÑÏûê
            "000660.KS",  # SKÌïòÏù¥ÎãâÏä§
            "035420.KS",  # NAVER
            "005380.KS",  # ÌòÑÎåÄÏ∞®
            "005490.KS",  # POSCOÌôÄÎî©Ïä§
            "035720.KS",  # Ïπ¥Ïπ¥Ïò§
            "051910.KS",  # LGÌôîÌïô
            "006400.KS",  # ÏÇºÏÑ±SDI
            "034020.KS",  # ÎëêÏÇ∞ÏóêÎÑàÎπåÎ¶¨Ìã∞
            "028260.KS",  # ÏÇºÏÑ±Î¨ºÏÇ∞
            "003550.KS",  # LG
            "068270.KS",  # ÏÖÄÌä∏Î¶¨Ïò®
            "207940.KS",  # ÏÇºÏÑ±Î∞îÏù¥Ïò§Î°úÏßÅÏä§
            "096770.KS",  # SKÏù¥ÎÖ∏Î≤†Ïù¥ÏÖò
            "323410.KS",  # Ïπ¥Ïπ¥Ïò§Î±ÖÌÅ¨
        ]
    
    @st.cache_data(ttl=3600)
    def get_kosdaq_stocks(_self):
        """KOSDAQ Ï£ºÏöî Ï¢ÖÎ™©Îì§"""
        return [
            "263750.KQ",  # ÌéÑÏñ¥ÎπÑÏä§
            "293490.KQ",  # Ïπ¥Ïπ¥Ïò§Í≤åÏûÑÏ¶à
            "041510.KQ",  # SM
            "178920.KQ",  # PIÏ≤®Îã®ÏÜåÏû¨
            "086980.KQ",  # ÏáºÎ∞ïÏä§
            "053800.KQ",  # ÏïàÎû©
            "064260.KQ",  # Îã§ÎÇ†
            "214150.KQ",  # ÌÅ¥ÎûòÏãúÏä§
            "039030.KQ",  # Ïù¥Ïò§ÌÖåÌÅ¨ÎãâÏä§
            "225570.KQ",  # ÎÑ•Ïä®Í≤åÏûÑÏ¶à
            "054620.KQ",  # APSÌôÄÎî©Ïä§
            "196170.KQ",  # ÏïåÌÖåÏò§Ï††
            "145020.KQ",  # Ìú¥Ï†§
            "222080.KQ",  # Ïî®ÏïÑÏù¥ÏóêÏä§
            "357780.KQ",  # ÏÜîÎ∏åÎ†àÏù∏
        ]
    
    @st.cache_data(ttl=3600)
    def get_nasdaq_stocks(_self):
        """NASDAQ Ï£ºÏöî Ï¢ÖÎ™©Îì§"""
        return [
            "AAPL", "MSFT", "GOOGL", "AMZN", "TSLA",
            "META", "NVDA", "NFLX", "CRM", "ADBE",
            "ORCL", "INTC", "AMD", "QCOM", "CSCO",
            "PYPL", "SPOT", "ZM", "DOCU", "ROKU"
        ]
    
    @st.cache_data(ttl=3600)
    def get_sp500_stocks(_self):
        """S&P 500 Ï£ºÏöî Ï¢ÖÎ™©Îì§"""
        return [
            "AAPL", "MSFT", "GOOGL", "AMZN", "TSLA",
            "BRK-B", "UNH", "JNJ", "XOM", "JPM",
            "V", "PG", "MA", "HD", "CVX",
            "WMT", "BAC", "ABBV", "PFE", "KO"
        ]
    
    def get_stock_data(self, symbol: str, period: str = "6mo") -> pd.DataFrame:
        """Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞"""
        try:
            stock = yf.Ticker(symbol)
            data = stock.history(period=period)
            if data.empty:
                return None
            return data
        except Exception as e:
            st.error(f"Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå® ({symbol}): {str(e)}")
            return None
    
    def get_stock_info(self, symbol: str) -> dict:
        """Ï£ºÏãù Í∏∞Î≥∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞"""
        try:
            stock = yf.Ticker(symbol)
            info = stock.info
            return {
                'symbol': symbol,
                'name': info.get('longName', info.get('shortName', 'N/A')),
                'market_cap': info.get('marketCap', 0),
                'pe_ratio': info.get('trailingPE', 'N/A'),
                'price': info.get('currentPrice', info.get('regularMarketPrice', 0)),
                'currency': info.get('currency', 'USD'),
                'sector': info.get('sector', 'N/A'),
                'industry': info.get('industry', 'N/A')
            }
        except Exception as e:
            return {
                'symbol': symbol,
                'name': 'N/A',
                'market_cap': 0,
                'pe_ratio': 'N/A',
                'price': 0,
                'currency': 'USD',
                'sector': 'N/A',
                'industry': 'N/A'
            }
    
    def calculate_technical_indicators(self, data: pd.DataFrame) -> pd.DataFrame:
        """Í∏∞Ïà†Ï†Å ÏßÄÌëú Í≥ÑÏÇ∞"""
        if data is None or data.empty:
            return None
            
        # Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú
        bb_period = 20
        bb_std = 2
        data['BB_Middle'] = ta.trend.sma_indicator(data['Close'], window=bb_period)
        data['BB_Upper'] = data['BB_Middle'] + (data['Close'].rolling(bb_period).std() * bb_std)
        data['BB_Lower'] = data['BB_Middle'] - (data['Close'].rolling(bb_period).std() * bb_std)
        
        # RSI
        data['RSI'] = ta.momentum.rsi(data['Close'], window=14)
        
        # MACD
        data['MACD'] = ta.trend.macd_diff(data['Close'])
        data['MACD_Signal'] = ta.trend.macd_signal(data['Close'])
        
        # Ïù¥ÎèôÌèâÍ∑†
        data['SMA_20'] = ta.trend.sma_indicator(data['Close'], window=20)
        data['SMA_50'] = ta.trend.sma_indicator(data['Close'], window=50)
        data['SMA_200'] = ta.trend.sma_indicator(data['Close'], window=200)
        
        # Í±∞ÎûòÎüâ Í¥ÄÎ†®
        data['Volume_SMA'] = ta.volume.volume_sma(data['Close'], data['Volume'], window=20)
        
        # Stochastic
        data['Stoch_K'] = ta.momentum.stoch(data['High'], data['Low'], data['Close'])
        data['Stoch_D'] = ta.momentum.stoch_signal(data['High'], data['Low'], data['Close'])
        
        # Williams %R
        data['Williams_R'] = ta.momentum.williams_r(data['High'], data['Low'], data['Close'])
        
        return data

def create_custom_strategy():
    """ÏÇ¨Ïö©Ïûê Ï†ïÏùò Ï†ÑÎûµ ÏÉùÏÑ±"""
    st.subheader("üõ†Ô∏è ÏÇ¨Ïö©Ïûê Ï†ïÏùò Ï†ÑÎûµ ÎπåÎçî")
    
    strategy = StrategyBuilder()
    
    # Ï°∞Í±¥ Í∞úÏàò ÏÑ†ÌÉù
    num_conditions = st.number_input("Ï°∞Í±¥ Í∞úÏàò", min_value=1, max_value=10, value=2)
    
    for i in range(num_conditions):
        st.write(f"**Ï°∞Í±¥ {i+1}**")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            condition_type = st.selectbox(
                f"ÏßÄÌëú ÏÑ†ÌÉù {i+1}",
                ["Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú", "RSI", "MACD", "Ïù¥ÎèôÌèâÍ∑†", "Í±∞ÎûòÎüâ", "Í∞ÄÍ≤©Ïï°ÏÖò"],
                key=f"type_{i}"
            )
        
        with col2:
            if condition_type == "Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú":
                operator = st.selectbox(
                    f"Ï°∞Í±¥ {i+1}",
                    ["ÏÉÅÎã® ÎèåÌåå", "ÌïòÎã® ÏßÄÏßÄ", "ÏÉÅÎã® ÏúÑ", "ÌïòÎã® ÏïÑÎûò"],
                    key=f"op_{i}"
                )
                value = 0
            elif condition_type == "RSI":
                operator = st.selectbox(
                    f"Ï°∞Í±¥ {i+1}",
                    ["Ï¥àÍ≥º", "ÎØ∏Îßå", "ÏÉÅÌñ•ÎèåÌåå", "ÌïòÌñ•ÎèåÌåå"],
                    key=f"op_{i}"
                )
            elif condition_type == "Ïù¥ÎèôÌèâÍ∑†":
                operator = st.selectbox(
                    f"Ï°∞Í±¥ {i+1}",
                    ["Í≥®Îì†ÌÅ¨Î°úÏä§", "Ï£ºÍ∞Ä>20ÏùºÏÑ†"],
                    key=f"op_{i}"
                )
                value = 0
            else:
                operator = st.selectbox(
                    f"Ï°∞Í±¥ {i+1}",
                    ["Ï¥àÍ≥º", "ÎØ∏Îßå"],
                    key=f"op_{i}"
                )
        
        with col3:
            if condition_type in ["RSI", "Í±∞ÎûòÎüâ", "Í∞ÄÍ≤©Ïï°ÏÖò"]:
                value = st.number_input(f"Í∞í {i+1}", value=70.0 if condition_type == "RSI" else 1.5, key=f"val_{i}")
            else:
                value = 0
        
        # Ï°∞Í±¥ Í∞ùÏ≤¥ ÏÉùÏÑ± Î∞è Ï∂îÍ∞Ä
        condition = create_condition_from_ui(condition_type, operator, value, i)
        if condition:
            strategy.add_condition(condition)
    
    # Ï°∞Ìï© Î∞©Ïãù
    logic = st.radio("Ï°∞Í±¥ Ï°∞Ìï© Î∞©Ïãù", ["AND (Î™®Îì† Ï°∞Í±¥ ÎßåÏ°±)", "OR (ÌïòÎÇòÎùºÎèÑ ÎßåÏ°±)"])
    strategy.set_combination_logic("AND" if "AND" in logic else "OR")
    
    return strategy

def create_condition_from_ui(condition_type, operator, value, index):
    """UI ÏûÖÎ†•ÏúºÎ°úÎ∂ÄÌÑ∞ Ï°∞Í±¥ Í∞ùÏ≤¥ ÏÉùÏÑ±"""
    try:
        # Ï°∞Í±¥ ÌÉÄÏûÖ Îß§Ìïë
        type_mapping = {
            "Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú": ConditionType.BOLLINGER_BAND,
            "RSI": ConditionType.RSI,
            "MACD": ConditionType.MACD,
            "Ïù¥ÎèôÌèâÍ∑†": ConditionType.MOVING_AVERAGE,
            "Í±∞ÎûòÎüâ": ConditionType.VOLUME,
            "Í∞ÄÍ≤©Ïï°ÏÖò": ConditionType.PRICE_ACTION
        }
        
        # Ïó∞ÏÇ∞Ïûê Îß§Ìïë
        operator_mapping = {
            "ÏÉÅÎã® ÎèåÌåå": Operator.BREAKOUT,
            "ÌïòÎã® ÏßÄÏßÄ": Operator.SUPPORT,
            "ÏÉÅÎã® ÏúÑ": Operator.GREATER_THAN,
            "ÌïòÎã® ÏïÑÎûò": Operator.LESS_THAN,
            "Ï¥àÍ≥º": Operator.GREATER_THAN,
            "ÎØ∏Îßå": Operator.LESS_THAN,
            "ÏÉÅÌñ•ÎèåÌåå": Operator.CROSS_ABOVE,
            "ÌïòÌñ•ÎèåÌåå": Operator.CROSS_BELOW,
            "Í≥®Îì†ÌÅ¨Î°úÏä§": Operator.CROSS_ABOVE,
            "Ï£ºÍ∞Ä>20ÏùºÏÑ†": Operator.GREATER_THAN
        }
        
        condition_obj_type = type_mapping.get(condition_type)
        operator_obj = operator_mapping.get(operator)
        
        if not condition_obj_type or not operator_obj:
            return None
        
        # ÌååÎùºÎØ∏ÌÑ∞ ÏÑ§Ï†ï
        parameters = None
        if condition_type == "Ïù¥ÎèôÌèâÍ∑†":
            if operator == "Í≥®Îì†ÌÅ¨Î°úÏä§":
                parameters = {'ma_type': 'golden_cross'}
            elif operator == "Ï£ºÍ∞Ä>20ÏùºÏÑ†":
                parameters = {'period': 20}
        elif condition_type == "Í∞ÄÍ≤©Ïï°ÏÖò":
            parameters = {'type': 'daily_change'}
        
        return Condition(
            name=f"{condition_type} {operator}",
            condition_type=condition_obj_type,
            operator=operator_obj,
            value=value,
            description=f"{condition_type} {operator} {value if value != 0 else ''}",
            parameters=parameters
        )
    except Exception as e:
        st.error(f"Ï°∞Í±¥ ÏÉùÏÑ± Ïò§Î•ò: {str(e)}")
        return None

def main():
    screener = AdvancedStockScreener()
    
    # ÌÉ≠ ÏÉùÏÑ±
    tab1, tab2, tab3 = st.tabs(["üéØ Í∏∞Î≥∏ Ïä§ÌÅ¨Î¶¨ÎÑà", "üõ†Ô∏è Í≥†Í∏â Ï†ÑÎûµ ÎπåÎçî", "üìä ÏãúÏû• Î∂ÑÏÑù"])
    
    with tab1:
        st.header("Í∏∞Î≥∏ Ïä§ÌÅ¨Î¶¨ÎÑà")
        
        col1, col2 = st.columns([1, 3])
        
        with col1:
            st.subheader("ÏÑ§Ï†ï")
            
            # ÏãúÏû• ÏÑ†ÌÉù
            selected_market = st.selectbox(
                "ÏãúÏû• ÏÑ†ÌÉù",
                ["KOSPI", "KOSDAQ", "NASDAQ", "S&P 500"]
            )
            
            # ÏÇ¨Ï†Ñ Ï†ïÏùòÎêú Ï†ÑÎûµ ÏÑ†ÌÉù
            strategy_type = st.selectbox(
                "Ï†ÑÎûµ ÏÑ†ÌÉù",
                ["Î™®Î©òÌÖÄ ÎèåÌåå", "Í≥ºÎß§ÎèÑ Î∞òÏ†Ñ", "Í≥®Îì† ÌÅ¨Î°úÏä§"]
            )
            
            # Ï†ÑÎûµ ÏÑ§Î™Ö
            if strategy_type == "Î™®Î©òÌÖÄ ÎèåÌåå":
                strategy = PresetStrategies.momentum_breakout()
            elif strategy_type == "Í≥ºÎß§ÎèÑ Î∞òÏ†Ñ":
                strategy = PresetStrategies.oversold_reversal()
            else:
                strategy = PresetStrategies.golden_cross()
            
            st.text_area("Ï†ÑÎûµ ÏÑ§Î™Ö", get_strategy_description(strategy), height=200)
            
            # Ïä§ÌÅ¨Î¶¨Îãù Ïã§Ìñâ
            if st.button("üîç Ïä§ÌÅ¨Î¶¨Îãù Ïã§Ìñâ", type="primary"):
                st.session_state.run_screening = True
                st.session_state.selected_market = selected_market
                st.session_state.strategy = strategy
        
        with col2:
            if hasattr(st.session_state, 'run_screening') and st.session_state.run_screening:
                st.subheader(f"üìä {st.session_state.selected_market} Ïä§ÌÅ¨Î¶¨Îãù Í≤∞Í≥º")
                
                stocks = screener.markets[st.session_state.selected_market]
                
                with st.spinner("Ï£ºÏãù Îç∞Ïù¥ÌÑ∞Î•º Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§..."):
                    results = []
                    progress_bar = st.progress(0)
                    
                    for i, symbol in enumerate(stocks):
                        data = screener.get_stock_data(symbol)
                        if data is not None:
                            data_with_indicators = screener.calculate_technical_indicators(data)
                            if st.session_state.strategy.evaluate_strategy(data_with_indicators):
                                stock_info = screener.get_stock_info(symbol)
                                latest_data = data_with_indicators.iloc[-1]
                                
                                results.append({
                                    'Ìã∞Ïª§': symbol,
                                    'Ï¢ÖÎ™©Î™Ö': stock_info['name'][:20] + "..." if len(stock_info['name']) > 20 else stock_info['name'],
                                    'ÏÑπÌÑ∞': stock_info['sector'],
                                    'ÌòÑÏû¨Í∞Ä': f"{latest_data['Close']:.2f}",
                                    'ÏãúÍ∞ÄÏ¥ùÏï°': f"{stock_info['market_cap']:,}" if stock_info['market_cap'] else "N/A",
                                    'PER': f"{stock_info['pe_ratio']:.2f}" if isinstance(stock_info['pe_ratio'], (int, float)) else "N/A",
                                    'RSI': f"{latest_data['RSI']:.1f}",
                                    'Î≥ºÎ¶∞Ï†ÄÎ∞¥Îìú%': f"{((latest_data['Close'] - latest_data['BB_Lower']) / (latest_data['BB_Upper'] - latest_data['BB_Lower']) * 100):.1f}%",
                                    'Í±∞ÎûòÎüâÎπÑÏú®': f"{(latest_data['Volume'] / latest_data['Volume_SMA']):.1f}x" if latest_data['Volume_SMA'] > 0 else "N/A"
                                })
                        
                        progress_bar.progress((i + 1) / len(stocks))
                        time.sleep(0.05)  # API Ï†úÌïú Î∞©ÏßÄ
                
                if results:
                    df_results = pd.DataFrame(results)
                    st.dataframe(df_results, use_container_width=True, height=400)
                    
                    # ÏÉÅÏÑ∏ Ï∞®Ìä∏
                    if len(results) > 0:
                        st.subheader("üìà ÏÉÅÏÑ∏ Ï∞®Ìä∏")
                        selected_stock = st.selectbox("Ï∞®Ìä∏Î•º Î≥º Ï¢ÖÎ™© ÏÑ†ÌÉù", [r['Ìã∞Ïª§'] for r in results])
                        
                        if selected_stock:
                            display_detailed_chart(screener, selected_stock)
                else:
                    st.info("ÏÑ§Ï†ïÌïú Ï°∞Í±¥Ïóê ÎßûÎäî Ï¢ÖÎ™©Ïù¥ ÏóÜÏäµÎãàÎã§.")
    
    with tab2:
        st.header("Í≥†Í∏â Ï†ÑÎûµ ÎπåÎçî")
        
        col1, col2 = st.columns([1, 2])
        
        with col1:
            custom_strategy = create_custom_strategy()
            
            selected_market_custom = st.selectbox(
                "ÏãúÏû• ÏÑ†ÌÉù",
                ["KOSPI", "KOSDAQ", "NASDAQ", "S&P 500"],
                key="custom_market"
            )
            
            if st.button("üöÄ ÏÇ¨Ïö©Ïûê Ï†ÑÎûµ Ïã§Ìñâ", type="primary"):
                st.session_state.run_custom = True
                st.session_state.custom_strategy = custom_strategy
                st.session_state.custom_market = selected_market_custom
        
        with col2:
            if hasattr(st.session_state, 'run_custom') and st.session_state.run_custom:
                st.subheader("ÏÇ¨Ïö©Ïûê Ï†ïÏùò Ï†ÑÎûµ Í≤∞Í≥º")
                
                # Ï†ÑÎûµ Ïã§Ìñâ Î°úÏßÅ (Í∏∞Î≥∏ Ïä§ÌÅ¨Î¶¨ÎÑàÏôÄ ÎèôÏùº)
                stocks = screener.markets[st.session_state.custom_market]
                
                with st.spinner("ÏÇ¨Ïö©Ïûê Ï†ÑÎûµÏùÑ Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§..."):
                    results = []
                    progress_bar = st.progress(0)
                    
                    for i, symbol in enumerate(stocks):
                        data = screener.get_stock_data(symbol)
                        if data is not None:
                            data_with_indicators = screener.calculate_technical_indicators(data)
                            if st.session_state.custom_strategy.evaluate_strategy(data_with_indicators):
                                stock_info = screener.get_stock_info(symbol)
                                latest_data = data_with_indicators.iloc[-1]
                                
                                results.append({
                                    'Ìã∞Ïª§': symbol,
                                    'Ï¢ÖÎ™©Î™Ö': stock_info['name'][:15] + "..." if len(stock_info['name']) > 15 else stock_info['name'],
                                    'ÌòÑÏû¨Í∞Ä': f"{latest_data['Close']:.2f}",
                                    'RSI': f"{latest_data['RSI']:.1f}",
                                    'MACD': f"{latest_data['MACD']:.3f}",
                                    '20ÏùºÏÑ†': f"{latest_data['SMA_20']:.2f}",
                                    'Í±∞ÎûòÎüâ': f"{latest_data['Volume']:,}"
                                })
                        
                        progress_bar.progress((i + 1) / len(stocks))
                        time.sleep(0.05)
                
                if results:
                    df_results = pd.DataFrame(results)
                    st.dataframe(df_results, use_container_width=True)
                else:
                    st.info("ÏÇ¨Ïö©Ïûê Ï†ïÏùò Ï°∞Í±¥Ïóê ÎßûÎäî Ï¢ÖÎ™©Ïù¥ ÏóÜÏäµÎãàÎã§.")
    
    with tab3:
        st.header("ÏãúÏû• Î∂ÑÏÑù")
        
        market_analysis = st.selectbox(
            "Î∂ÑÏÑùÌï† ÏãúÏû•",
            ["KOSPI", "KOSDAQ", "NASDAQ", "S&P 500"]
        )
        
        if st.button("üìä ÏãúÏû• Î∂ÑÏÑù Ïã§Ìñâ"):
            analyze_market(screener, market_analysis)

def display_detailed_chart(screener, symbol):
    """ÏÉÅÏÑ∏ Ï∞®Ìä∏ ÌëúÏãú"""
    chart_data = screener.get_stock_data(symbol, "1y")
    chart_data = screener.calculate_technical_indicators(chart_data)
    
    # Î©îÏù∏ Ï∞®Ìä∏
    fig = go.Figure()
    
    # Ï∫îÎì§Ïä§Ìã±
    fig.add_trace(go.Candlestick(
        x=chart_data.index,
        open=chart_data['Open'],
        high=chart_data['High'],
        low=chart_data['Low'],
        close=chart_data['Close'],
        name="Price"
    ))
    
    # Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú
    fig.add_trace(go.Scatter(
        x=chart_data.index,
        y=chart_data['BB_Upper'],
        line=dict(color='red', width=1),
        name='BB Upper'
    ))
    fig.add_trace(go.Scatter(
        x=chart_data.index,
        y=chart_data['BB_Lower'],
        line=dict(color='red', width=1),
        name='BB Lower',
        fill='tonexty',
        fillcolor='rgba(255,0,0,0.1)'
    ))
    
    # Ïù¥ÎèôÌèâÍ∑†ÏÑ†
    fig.add_trace(go.Scatter(
        x=chart_data.index,
        y=chart_data['SMA_20'],
        line=dict(color='blue', width=1),
        name='20ÏùºÏÑ†'
    ))
    fig.add_trace(go.Scatter(
        x=chart_data.index,
        y=chart_data['SMA_50'],
        line=dict(color='orange', width=1),
        name='50ÏùºÏÑ†'
    ))
    
    fig.update_layout(
        title=f"{symbol} ÏÉÅÏÑ∏ Ï∞®Ìä∏",
        yaxis_title="Price",
        height=500,
        showlegend=True
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Î≥¥Ï°∞ ÏßÄÌëúÎì§
    col1, col2 = st.columns(2)
    
    with col1:
        # RSI Ï∞®Ìä∏
        fig_rsi = go.Figure()
        fig_rsi.add_trace(go.Scatter(
            x=chart_data.index,
            y=chart_data['RSI'],
            line=dict(color='purple'),
            name='RSI'
        ))
        fig_rsi.add_hline(y=70, line_dash="dash", line_color="red")
        fig_rsi.add_hline(y=30, line_dash="dash", line_color="green")
        fig_rsi.update_layout(
            title="RSI",
            yaxis_title="RSI",
            height=250
        )
        st.plotly_chart(fig_rsi, use_container_width=True)
    
    with col2:
        # MACD Ï∞®Ìä∏
        fig_macd = go.Figure()
        fig_macd.add_trace(go.Scatter(
            x=chart_data.index,
            y=chart_data['MACD'],
            line=dict(color='blue'),
            name='MACD'
        ))
        fig_macd.add_trace(go.Scatter(
            x=chart_data.index,
            y=chart_data['MACD_Signal'],
            line=dict(color='red'),
            name='Signal'
        ))
        fig_macd.update_layout(
            title="MACD",
            yaxis_title="MACD",
            height=250
        )
        st.plotly_chart(fig_macd, use_container_width=True)

def analyze_market(screener, market):
    """ÏãúÏû• Î∂ÑÏÑù"""
    stocks = screener.markets[market]
    
    with st.spinner(f"{market} ÏãúÏû•ÏùÑ Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§..."):
        market_data = []
        
        for symbol in stocks[:10]:  # Ï≤òÏùå 10Í∞ú Ï¢ÖÎ™©Îßå Î∂ÑÏÑù
            data = screener.get_stock_data(symbol, "3mo")
            if data is not None:
                data = screener.calculate_technical_indicators(data)
                latest = data.iloc[-1]
                
                market_data.append({
                    'Symbol': symbol,
                    'RSI': latest['RSI'],
                    'Price_vs_BB': (latest['Close'] - latest['BB_Lower']) / (latest['BB_Upper'] - latest['BB_Lower']),
                    'Volume_Ratio': latest['Volume'] / latest['Volume_SMA'] if latest['Volume_SMA'] > 0 else 1,
                    'MA_Signal': 1 if latest['Close'] > latest['SMA_20'] else 0
                })
    
    if market_data:
        df = pd.DataFrame(market_data)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # RSI Î∂ÑÌè¨
            fig_rsi = px.histogram(df, x='RSI', bins=20, title="RSI Î∂ÑÌè¨")
            fig_rsi.add_vline(x=30, line_dash="dash", line_color="green")
            fig_rsi.add_vline(x=70, line_dash="dash", line_color="red")
            st.plotly_chart(fig_rsi, use_container_width=True)
        
        with col2:
            # Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú ÏúÑÏπò Î∂ÑÌè¨
            fig_bb = px.histogram(df, x='Price_vs_BB', bins=20, title="Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú ÎÇ¥ ÏúÑÏπò Î∂ÑÌè¨")
            st.plotly_chart(fig_bb, use_container_width=True)
        
        # ÏãúÏû• ÏöîÏïΩ
        st.subheader("ÏãúÏû• ÏöîÏïΩ")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Í≥ºÎß§ÎèÑ Ï¢ÖÎ™©", f"{len(df[df['RSI'] < 30])}/{len(df)}")
        with col2:
            st.metric("Í≥ºÎß§Ïàò Ï¢ÖÎ™©", f"{len(df[df['RSI'] > 70])}/{len(df)}")
        with col3:
            st.metric("20ÏùºÏÑ† ÏÉÅÏúÑ", f"{df['MA_Signal'].sum()}/{len(df)}")
        with col4:
            st.metric("ÌèâÍ∑† Í±∞ÎûòÎüâÎπÑ", f"{df['Volume_Ratio'].mean():.1f}x")

if __name__ == "__main__":
    main() 